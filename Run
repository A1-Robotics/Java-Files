//TODO : if the robot needs to go different speeds at different times, some stuff will have to be adjusted 
//

import rxtxrobot.*;


public class Run {
	int runnumber;
	public static Run run1 = new Run(1);
	public static RXTXRobot r = new ArduinoUno(); // Create RXTXRobot object
	final private static int PING_PIN = 4;
		
	public static void main(String[] args) {
		r.setPort("COM3"); // Set the port to COM3
		r.setVerbose(true); // Turn on debugging messages
		r.connect();		
		r.attachMotor(RXTXRobot.MOTOR1, 6); //left motor  attach motors
		r.attachMotor(RXTXRobot.MOTOR2, 7); //right motor
		r.attachServo(RXTXRobot.SERVO1, 5); //Connect the servos to the Arduino
		
		double backup = .5; //this is the distance in meters the robot should back up after bumping the wall in order to turn
		int pausetime = 500; //the amount of time the robot will pause between segments of the run
		
		//run forward
		run1.move(3);
		r.sleep(pausetime);
		
		//lift boom
		run1.liftBoom();
		r.sleep(pausetime);
		
		//turn 90 degrees counterclockwise
		run1.turn(90);
		r.sleep(pausetime);
		
		//run forward
		run1.move(2);
		r.sleep(pausetime);
		
//TODO calibrate numbers for detecting the gap		
		//turn & detect gap
		run1.turn(90);
		int location = run1.detectGap();
		if (location == 1) {
			run1.turn(45);
			run1.move(backup);
			run1.turn(-45);
		} else if (location == 2) {
			run1.turn(-45);
			run1.move(backup);
			run1.turn(45);
		}
		
		//orient with bridge
		run1.moveUntilBumped();
		run1.move(backup);
		run1.turn(90);
		run1.moveUntilBumped();
		run1.move(backup);
		run1.turn(180);
		r.sleep(pausetime);
		
		//cross bridge
		run1.moveUntilBumped();
		run1.move(backup);
		run1.turn(-90);
		run1.moveUntilBumped();
		
		//conductivity
		run1.conductivity();
		
		r.close();
		
	}
	
	public Run(int x) {
	}
	
	public void turn(int degrees) {
//I'm just guessing on all the numbers here		
		
		int turnspeed = 250;
		int turntime = getTurnTime(degrees);
		//s was 250 for Sprint 2
		//t was 7700 for Sprint 3

		r.refreshAnalogPins();
		r.runMotor(RXTXRobot.MOTOR1, turnspeed, RXTXRobot.MOTOR2, turnspeed, 0); // Run both motors forward indefinitely
		r.sleep(turntime); // Pause execution for turntime in ticks, but the motors keep running.
		r.runMotor(RXTXRobot.MOTOR1, 0, RXTXRobot.MOTOR2, 0, 0); // Stop both motors
		r.close();
	}
	
	public void move(double distance) {
	//	int s = getMoveSpeed(distance);
		int movespeed = 250;
		int movetime = getMoveTime(distance);
		//s was 250 for Sprint 2
		//t was 7700 for Sprint 3

		r.refreshAnalogPins();
		r.runMotor(RXTXRobot.MOTOR1, movespeed, RXTXRobot.MOTOR2, -movespeed, 0); // Run both motors forward indefinitely
		r.sleep(movetime); // Pause execution for movetime ticks, but the motors keep running.
		r.runMotor(RXTXRobot.MOTOR1,0,RXTXRobot.MOTOR2,0,0); // Stop both motors
	}
	
	public void liftBoom() {
//===========Move Servo		
		r.moveServo(RXTXRobot.SERVO1, 180); // Move Servo 1 to location 30
	
	// TODO make sure the boom works	
	// Does the boom need to be lowered back? or does r.close() move it back	
	//	r.sleep(4000);
	//	r.moveServo(RXTXRobot.SERVO1, 90); // Move Servo 1 to location 30
	//	r.sleep(2000);
		
//===========Temperature		
		r.refreshAnalogPins(); // Cache the Analog pin information	
		int thermoAnalogPin = 1; //this is the long red and black thermister
		 
		int datapoints = 10;
		int[] rawData = new int[datapoints]; 
		int rawTotal = 0;
		
		for (int c = 0; c < datapoints; c++) {
			r.refreshAnalogPins();
			AnalogPin temp = r.getAnalogPin(thermoAnalogPin); //get pin data
			rawData[c] = temp.getValue();
			rawTotal = rawTotal + rawData[c];
			System.out.println(c + 1 + "\t" + rawData[c]);
			r.sleep(100);
		}
    
		double rawAvg = (double) rawTotal / (double) datapoints;
		System.out.println("The probe read the value: " + rawAvg);
		System.out.println("In volts: " + (rawAvg * (5.0/1023.0)));
		
		double slope = -11.05667506;
		double intercept = 3827.700252;
		double temp = ((rawAvg - intercept)/slope)-273;
		System.out.println();
		System.out.println("It is " + temp + " degrees Celsius");
		
//====================Wind readings
		r.refreshAnalogPins(); // Cache the Analog pin information	
		
		int windAnalogPin = 0;
		 
		int Totaltemp1 = 0;
		int Totaltemp2 = 0;
		
		int datapoints2 = 10;
		for (int c = 0; c < datapoints2; c++) {
			r.refreshAnalogPins();
			AnalogPin temp0 = r.getAnalogPin(windAnalogPin); //get pin data
			AnalogPin temp2 = r.getAnalogPin(thermoAnalogPin); //get pin data
			
			Totaltemp1 = Totaltemp1 + temp0.getValue();
			Totaltemp2 = Totaltemp2 + temp2.getValue();
			
			r.sleep(500);
		}
    
		double Avgtemp1 = Totaltemp1 / datapoints2;
		double Avgtemp2 = Totaltemp2 / datapoints2;
		
		System.out.println("Input 1 = " + Avgtemp1);
		System.out.println("Input 2 = " + Avgtemp2);
		System.out.println("Difference = " + (Avgtemp1 - Avgtemp2));
	}

	public int getMoveTime(double distance) {
		double dbl = (distance / 3) * 7700;
		int t = (int) dbl;
		return t;
	}
	
	public int getTurnTime(int degrees) {
//TODO calibrate the numbers for turning	
		int d = degrees * 500;
		return d;
		}
	
	public int detectGap() {
		int location;
		run1.turn(45);
		double left = run1.getPing();
		run1.turn(-90);
		double right = run1.getPing();
		run1.turn(45);
		
		if (left  > right) {
			location = 1;
		} else {
			location = 2;
		}
		return location;
	}
	
	public double getPing() {
		int datapoints = 10;
		int[] rawData = new int[datapoints]; 
		int rawTotal = 0;
		
		for (int c = 0; c < datapoints; c++) {
			rawData[c] = r.getPing(PING_PIN);
			rawTotal = rawTotal + rawData[c];
			r.sleep(50);
		}
		double rawAvg = (double) rawTotal / (double) datapoints;
		System.out.println();
		System.out.println("Distance measured: " + rawAvg);
		return rawAvg;
	}
	
	public void moveUntilBumped() {
		int bsAnalogPin = 2;
		boolean notBumped = true;
		while(notBumped) { //run this loop until the sensor is bumped
			
			
			//***Should this be outside the while loop?
			r.runMotor(RXTXRobot.MOTOR1, 200, RXTXRobot.MOTOR2, -200, 0); //start the motors
	
			
			
			r.refreshAnalogPins(); 
			AnalogPin temp = r.getAnalogPin(bsAnalogPin); //get pin data
			if(temp.getValue() < 950) { //if the data dips below 950, set the boolean to false, exiting while loop
				notBumped=false;
			}
		}
		r.runMotor(RXTXRobot.MOTOR1, 0, RXTXRobot.MOTOR2, 0, 0); //turn off the motors
	}
	
	public void conductivity() {
		r.moveServo(RXTXRobot.SERVO1, 180); // Move Servo 1 to location 30
		r.sleep(4000);
//===========Conductivity logic
	}
}
