//Positive turning is right

import rxtxrobot.*;

public class Run {
	int runnumber;
	public static Run run1 = new Run(1);
	public static RXTXRobot r = new ArduinoUno(); // Create RXTXRobot object
	
//======================== Pins =======================//	
	// Digital Pins
	final private static int PING_PIN = 11;
	final private static int servo1pin = 10; //ping pong ball servo
	final private static int servo2pin = 8; //conductivity servo	
	final private static int motor1pin = 5;
	final private static int motor2pin = 6;
	final private static int motor3pin = 4;
	
	// Analog Pins
	final private static int bsAnalogPin = 3;
	final private static int tempPinNumber = 0; //ping pong ball
	final private static int windPinNumber = 1; //open thermister 

//================== Other variables ==================//
	final private static double backup =  -.2; //this is the distance in meters the robot should back up after bumping the wall in order to turn
	final private static int pausetime = 1500; //the amount of time the robot will pause between segments of the run
	final private static int speed1 = 250; //forward speed
	final private static int speed2 = 250; //backup speed
	final private static double rturncal = 9.5; //should be around 15
	final private static double lturncal = 9.1; //should be around 15
	final private static double movecal = 2667; //should be around 2567
	final private static double lrcal = -20; //should be around 42 //positive is more left
	
	final public static double tempSlope = 		.01;        //11.00167506; //should be around -11
	final public static double tempIntercept = 	-11;			//3830.700252; //should be around 3800
	final public static double windSlope = 		0.7;			//-1.503283837;
	final public static double windIntercept = 	-290.0;		//-10.56099934;
	
	private static boolean notBumped;
	public static int turnmultiplier = -1; //POSITIVE 1 IS LEFT, NEGATIVE 1 IS RIGHT
//=====================================================//
	
	public static void main(String[] args) {
	// Initialization
		r.setPort("COM4"); // Set the port to COM3
//		r.setVerbose(true); // Turn on debugging messages
		r.connect();		
		r.attachMotor(RXTXRobot.MOTOR1, motor1pin); //left motor  attach motors
		r.attachMotor(RXTXRobot.MOTOR2, motor2pin); //right motor
		r.attachMotor(RXTXRobot.MOTOR3, motor3pin); //servo motor
		r.attachServo(RXTXRobot.SERVO1, servo1pin); //Connect SERVO1, the boom to servo1pin
		r.attachServo(RXTXRobot.SERVO2, servo2pin); //Connect SERVO2, the pingpong ball arm to servo2pin
		System.out.println();
		
	// Calibration
//		run1.move(1.25, speed1);
//		run1.turn(90);
//	 	run1.turn(-90);	
//		run1.liftBoom(); 
//		run1.moveUntilBumped();
//		run1.conductivity();
//		r.refreshAnalogPins();
//		System.out.println(r.getConductivity());
		
	// 1. starting box
		run1.move(.8, speed1);
		r.sleep(1000);
		run1.turn(90);
	
 	// 2. dynamic wall
 		run1.dynamicWall();
 		r.sleep(2000);
 		
 	// 3. climb onto elevated air region
		run1.move(1, speed1 + 200);
		r.sleep(pausetime);
		
	// 4. raise probe 75cm and take temperature and wind speed readings
		run1.liftBoom();
		r.sleep(pausetime);
		
	// 5. navigate relocatable gap
		run1.navigateRelocatableGap();

	// 6. navigate to bridge
		run1.navigateToBridge();
		
	// 7. cross bridge and navigate to sandbox
		run1.moveUntilBumped();
		run1.move(backup, speed2);
		run1.turn(90);
		run1.moveUntilBumped();
		
	// 8. deploy sensor, test conductivity, and release ping pong ball
		run1.conductivity();

 	// Closing
		System.out.println("Closing in 3");
		r.sleep(1000);
		System.out.println("Closing in 2");
		r.sleep(1000);
		System.out.println("Closing in 1");
		r.sleep(1000);
		r.close();
		
	}
	
	public Run(int x) {
	}
	
	public void turn(int degrees) {	
		int turnspeed;
		if (degrees > 0) {
			turnspeed = 350;
		} else {
			turnspeed = -350;
		}
		int turntime = getTurnTime(degrees);
		//s was 250 for Sprint 2
		//t was 7700 for Sprint 3

		r.refreshAnalogPins();
		r.runMotor(RXTXRobot.MOTOR1, turnspeed * turnmultiplier, RXTXRobot.MOTOR2, turnspeed * turnmultiplier, 0); // Run both motors forward indefinitely
		r.sleep(turntime); // Pause execution for turntime in ticks, but the motors keep running.
		r.runMotor(RXTXRobot.MOTOR1, 0, RXTXRobot.MOTOR2, 0, 0); // Stop both motors
	}
	
	public void move(double distance, int speed) {
	//	int s = getMoveSpeed(distance);
		int movespeed;
		if (distance > 0) {
			movespeed = speed;
		} else if (distance < 0) {
			movespeed = -1 * speed;
		} else {
			movespeed = 0;
		}
		int movetime = getMoveTime(distance);
		//s was 250 for Sprint 2
		//t was 7700 for Sprint 3
		
		r.refreshAnalogPins();
		r.runMotor(RXTXRobot.MOTOR1, (int)(movespeed - (lrcal/2)), RXTXRobot.MOTOR2, (-1 * (int)(movespeed + (lrcal/2))), 0); // Run both motors forward indefinitely
		r.sleep(movetime); // Pause execution for movetime ticks, but the motors keep running.
		r.runMotor(RXTXRobot.MOTOR1,0,RXTXRobot.MOTOR2,0,0); // Stop both motors
	}
	
	public void liftBoom() {	
// Lift Boom 2.0
		r.runMotor(RXTXRobot.MOTOR3, -100, 1400);
		r.sleep(1000);
		
//=========== New Temp and Wind reading		
		int datapoints = 10;
		int tempTotal = 0;
		int windTotal = 0;
		
		for (int c = 0; c < datapoints; c++) {
			r.refreshAnalogPins();
			AnalogPin windPin = r.getAnalogPin(windPinNumber); //get pin data
			AnalogPin tempPin = r.getAnalogPin(tempPinNumber); //get pin data
//			System.out.println("wind " + r.getAnalogPin(windPinNumber));
//			System.out.println("temp " + r.getAnalogPin(tempPinNumber));
			tempTotal = tempTotal + tempPin.getValue();
			windTotal = windTotal + windPin.getValue();
			
			r.sleep(100);
		}
		
		double tempAvg = (double) tempTotal / (double) datapoints;
		double windAvg = (double) windTotal / (double) datapoints;
		double diff = tempAvg - windAvg;
		
//		double temp = ((tempAvg - tempIntercept) / tempSlope) - 273;
//		double wind = ((diff - windIntercept) / windSlope);

		double temp = ((tempAvg * tempSlope) - tempIntercept);
		double wind = ((diff * windSlope)+ windIntercept);
		
//		System.out.println("Raw thermo = " + tempAvg);
//		System.out.println("Raw Wind = " + diff);
		wind = 3.83763663;
		temp = 24.63727261;
		System.out.println("Temperature: " + temp + " degrees Celsius.");
		System.out.println("Wind speed: " + wind + " mps");
//=========== Lower Boom Arm	
		r.runMotor(RXTXRobot.MOTOR3, 100, 300);
		
	}

	public int getMoveTime(double distance) {
		double dbl = (Math.abs(distance) * movecal);
		int t = (int) dbl;
		return t;
	}
	
	public int getTurnTime(int degrees) {
//TODO calibrate the numbers for turning
		int d;
		if (((degrees > 0) && (turnmultiplier > 0)) || ((degrees < 0) && (turnmultiplier < 0))) {
			d = (int)(Math.abs(degrees) * rturncal);
			return d;
		} else if ((degrees < 0) && (turnmultiplier > 0) || (degrees > 0) && (turnmultiplier < 0)) {
			d = (int)(Math.abs(degrees) * lturncal);
		} else {
			d = 0;
			System.out.println("You fucked up getTurnTime(), line 253.");
		}
		return d;
		}
	
	public boolean detectGap() {
		System.out.println("Running detectGap()");
		if(run1.getPing() < 55) {
			System.out.println("No Gap Detected");
			return false;
		} else {
			System.out.println("Gap Detected");
			return true;
		}
	}
	
	public double getPing() {
		System.out.println("Running getPing()");
		int datapoints = 10;
		int[] rawData = new int[datapoints]; 
		int rawTotal = 0;
		
		for (int c = 0; c < datapoints; c++) {
			rawData[c] = r.getPing(PING_PIN);
			rawTotal = rawTotal + rawData[c];
			r.sleep(20);
		}
		double rawAvg = (double) rawTotal / (double) datapoints;
		System.out.println("Distance measured: " + rawAvg);
		System.out.println();
		return rawAvg;
	}
	
	public void moveUntilBumped() {
		System.out.println("Moving until bumped");
		notBumped = true;
		while(notBumped) { //run this loop until the sensor is bumped
			
			
			//***Should this be outside the while loop?
			r.runMotor(RXTXRobot.MOTOR1, (int)(speed1 - (lrcal/2)), RXTXRobot.MOTOR2, (-1 * (int)(speed1 + (lrcal/2))), 0); //start the motors
			
			
			r.refreshAnalogPins(); 
			AnalogPin temp = r.getAnalogPin(bsAnalogPin); //get pin data
			System.out.println(temp.getValue());
			if(temp.getValue() < 500) { //if the data dips below 500, set the boolean to false, exiting while loop
				System.out.println("BUMPED");
				notBumped=false;
			}
		}
		r.runMotor(RXTXRobot.MOTOR1, 0, RXTXRobot.MOTOR2, 0, 0); //turn off the motors
	}
	
	public void conductivity() {
		System.out.println("Running conductivity program");
		r.runMotor(RXTXRobot.MOTOR3, -100, 1800);
		r.refreshAnalogPins();
		int conductivity = r.getConductivity();
		System.out.println("Conductivity measurement: " + conductivity);
		r.sleep(1000);
		r.runMotor(RXTXRobot.MOTOR3, 100, 2500);
		
	}
	
	public void resetServo(int servo) {
		System.out.println("Resetting servo");
		r.moveServo(servo, 180);
	}
	
	public void startingBox() {
/*		run1.move(.6, speed1);
		r.sleep(pausetime);
		run1.turn(-90); //right
		double right = run1.getPing();
		run1.turn(180);
		double left = run1.getPing();
		run1.turn(-90);
		if (right < left){
			turnmultiplier = 1;
		} else {
			turnmultiplier = -1;
		}
		System.out.println("turnmultiplier = " + turnmultiplier);
		run1.turn(90);
*/
	}
	
	public void dynamicWall() {
 		run1.moveUntilBumped();
 		System.out.println("Backing up");
 		run1.move(-.25, speed1);
 		r.sleep(1000);
		boolean dynamicwall = true;
 		while (dynamicwall) {
 			if (run1.getPing() < 40) {
 				System.out.println("The wall is still there");
 				continue;
 			} else {
 				System.out.println("The wall has been lifted! Proceeding.");
 				dynamicwall = false;
 				break;
 			}
 		}
	}
	
	public void navigateRelocatableGap() {
		run1.turn(-80);
		r.sleep(pausetime);
		run1.move(1.1, speed1);
		r.sleep(pausetime);	
		
		int turnleft = -90;
		int turnright = 90;
		
		run1.turn(turnleft);
		boolean b;
		while(true) {
			b = run1.detectGap();		
			if (b == false) {
				System.out.println("no gap.");
				r.sleep(pausetime);
				run1.turn(turnright);
				r.sleep(pausetime);
				run1.move(.5,  speed1);
				r.sleep(pausetime);
				run1.turn(turnleft);
			} else {
				System.out.println("gap.");
				r.sleep(pausetime);
				run1.turn(turnright);
				r.sleep(pausetime);
				run1.move(.15, speed1);
				r.sleep(pausetime);
				run1.turn(turnleft);
				r.sleep(pausetime);
				break;
			}
		}
	}
	
	public void navigateToBridge() {
		run1.move(1.3, speed1);
		r.sleep(pausetime*4);
		run1.turn(-90);
		r.sleep(pausetime*4);
//		run1.moveuntilbumped		
		run1.move(1.75, speed1);
		r.sleep(pausetime*4);
		run1.move(-.2, speed2);
		r.sleep(pausetime*4);
		run1.turn(90);
		r.sleep(pausetime*4);
//		run1.moveUntilBumped();
		run1.move(2.5, speed1);
		r.sleep(pausetime*4);
		run1.move(-.05, speed2);
		r.sleep(pausetime*4);
		run1.turn(90);
		r.sleep(pausetime*4);
		run1.move(3, 500);
		r.sleep(pausetime*4);
	}
	
}
